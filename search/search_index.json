{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Feather Feather is a light-weight protocol for sandboxed code execution on the web. It is created to make it easier to create tutorials and documentation with live examples. Goals Simple - easy to use interface Light-weight - easy to get it up and running Extensible - easy to build custom runtimes for different languages and environments Pluggable - easily pluggable into existing documentation generators and content management systems Protocol See The Feather Protocol page. Implementations The Feather python runtime is a work-in-progress reference implementation of the Feather protocol. Found an issue? Please raise an issue in the github repo .","title":"Home"},{"location":"#feather","text":"Feather is a light-weight protocol for sandboxed code execution on the web. It is created to make it easier to create tutorials and documentation with live examples.","title":"Feather"},{"location":"#goals","text":"Simple - easy to use interface Light-weight - easy to get it up and running Extensible - easy to build custom runtimes for different languages and environments Pluggable - easily pluggable into existing documentation generators and content management systems","title":"Goals"},{"location":"#protocol","text":"See The Feather Protocol page.","title":"Protocol"},{"location":"#implementations","text":"The Feather python runtime is a work-in-progress reference implementation of the Feather protocol.","title":"Implementations"},{"location":"#found-an-issue","text":"Please raise an issue in the github repo .","title":"Found an issue?"},{"location":"protocol/","text":"The Feather Protocol The Feather Protocol describes the standard HTTP API supported by all Feather runtimes. Version This document describes the Feather Protocol, version 0.1 . The Protocol Code Execution The feather protocol supports three ways to execute code. The first approach is to send the code as a payload. $ curl -d 'print(\"hello, world!\")' https://feather-app/runtimes/python hello, world! The second approach is to send the file as multi-part formdata. This allows sending one or more files for execution. $ cat main.py print(\"hello, world!\") $ curl -Fmain.py=@main.py https://feather-app/runtimes/python hello, world! The third approach is to send the payload as JSON. $ cat payload.json { \"files\": [ {\"name\": \"main.py\", \"contents\": \"print('hello, world!')\"} ], } $ curl \\ -H 'Content-type: application/json' \\ -d @payload.json \\ https://feather-app/runtimes/python hello, world! Request and Response Headers The feather protocol supports special headers to specify command-line arguments, environment variables and the entrypoint, the source file to execute. The response includes headers to indicate the exit status and the time taken to execute the request. $ curl -i \\ -H 'x-feather-args: feather' \\ -H 'x-feather-env: X=1 DEBUG=true' \\ -H 'x-feather-entrypoint: hello.py' \\ -d hello.py=@hello.py HTTP/1.1 200 OK Content-type: text/plain x-feather-exit-status: 0 x-feather-time-taken: 0.1 sys.argv: ['feather'] Hello, feather!","title":"The Feather Protocol"},{"location":"protocol/#the-feather-protocol","text":"The Feather Protocol describes the standard HTTP API supported by all Feather runtimes.","title":"The Feather Protocol"},{"location":"protocol/#version","text":"This document describes the Feather Protocol, version 0.1 .","title":"Version"},{"location":"protocol/#the-protocol","text":"","title":"The Protocol"},{"location":"protocol/#code-execution","text":"The feather protocol supports three ways to execute code. The first approach is to send the code as a payload. $ curl -d 'print(\"hello, world!\")' https://feather-app/runtimes/python hello, world! The second approach is to send the file as multi-part formdata. This allows sending one or more files for execution. $ cat main.py print(\"hello, world!\") $ curl -Fmain.py=@main.py https://feather-app/runtimes/python hello, world! The third approach is to send the payload as JSON. $ cat payload.json { \"files\": [ {\"name\": \"main.py\", \"contents\": \"print('hello, world!')\"} ], } $ curl \\ -H 'Content-type: application/json' \\ -d @payload.json \\ https://feather-app/runtimes/python hello, world!","title":"Code Execution"},{"location":"protocol/#request-and-response-headers","text":"The feather protocol supports special headers to specify command-line arguments, environment variables and the entrypoint, the source file to execute. The response includes headers to indicate the exit status and the time taken to execute the request. $ curl -i \\ -H 'x-feather-args: feather' \\ -H 'x-feather-env: X=1 DEBUG=true' \\ -H 'x-feather-entrypoint: hello.py' \\ -d hello.py=@hello.py HTTP/1.1 200 OK Content-type: text/plain x-feather-exit-status: 0 x-feather-time-taken: 0.1 sys.argv: ['feather'] Hello, feather!","title":"Request and Response Headers"}]}